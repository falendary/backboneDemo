var About, Description,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

About = (function(superClass) {
  extend(About, superClass);

  function About() {
    return About.__super__.constructor.apply(this, arguments);
  }

  About.prototype.defaults = {
    title: "hello",
    description: "Backbone"
  };

  return About;

})(Backbone.Model);

Description = (function(superClass) {
  extend(Description, superClass);

  function Description() {
    return Description.__super__.constructor.apply(this, arguments);
  }

  Description.prototype.model = About;

  Description.prototype.url = 'data/about.json';

  Description.prototype.initialize = function() {
    return this.fetch({
      success: this.fetchSuccess,
      error: this.fetchError
    });
  };

  Description.prototype.fetchSuccess = function(collection, response) {};

  Description.prototype.fetchError = function(collection, response) {
    throw new Error("About fetch error");
  };

  return Description;

})(Backbone.Collection);

var Student, Students,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

Student = (function(superClass) {
  extend(Student, superClass);

  function Student() {
    return Student.__super__.constructor.apply(this, arguments);
  }

  return Student;

})(Backbone.Model);

Students = (function(superClass) {
  extend(Students, superClass);

  function Students() {
    return Students.__super__.constructor.apply(this, arguments);
  }

  Students.prototype.model = Student;

  Students.prototype.url = 'data/rating.json';

  Students.prototype.initialize = function() {
    return this.fetch({
      success: this.fetchSuccess,
      error: this.fetchError
    });
  };

  Students.prototype.fetchSuccess = function(collection, response) {};

  Students.prototype.fetchError = function(collection, response) {
    throw new Error("Rating fetch error");
  };

  return Students;

})(Backbone.Collection);

var Task, TasksList, tasks,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

Task = (function(superClass) {
  extend(Task, superClass);

  function Task() {
    return Task.__super__.constructor.apply(this, arguments);
  }

  return Task;

})(Backbone.Model);

TasksList = (function(superClass) {
  extend(TasksList, superClass);

  function TasksList() {
    return TasksList.__super__.constructor.apply(this, arguments);
  }

  TasksList.prototype.model = Task;

  TasksList.prototype.url = 'data/tasks.json';

  TasksList.prototype.initialize = function() {
    return this.fetch({
      success: this.fetchSuccess,
      error: this.fetchError
    });
  };

  TasksList.prototype.fetchSuccess = function(collection, response) {};

  TasksList.prototype.fetchError = function(collection, response) {
    throw new Error("Tasks fetch error");
  };

  return TasksList;

})(Backbone.Collection);

tasks = new TasksList;

var AboutView, about_view,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

AboutView = (function(superClass) {
  extend(AboutView, superClass);

  function AboutView() {
    return AboutView.__super__.constructor.apply(this, arguments);
  }

  AboutView.prototype.el = $('#workarea');

  AboutView.prototype.initialize = function() {
    _.bindAll(this, 'render');
    return this.collection = new Description;
  };

  AboutView.prototype.render = function() {
    var template, templateEl;
    templateEl = $("#about_template");
    template = _.template(templateEl.html(), {});
    return _.each(this.collection.models, function(data) {
      return $(this.el).html(template(data.toJSON()));
    }, this);
  };

  return AboutView;

})(Backbone.View);

about_view = new AboutView;

var RatingView, rating_view,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

RatingView = (function(superClass) {
  extend(RatingView, superClass);

  function RatingView() {
    return RatingView.__super__.constructor.apply(this, arguments);
  }

  RatingView.prototype.el = $('#workarea');

  RatingView.prototype.initialize = function() {
    return this.collection = new Students;
  };

  RatingView.prototype.render = function() {
    var template, templateEl;
    templateEl = $("#rating_template");
    template = _.template(templateEl.html(), {});
    $(this.el).html(template);
    return _.each(this.collection.models, function(data) {
      var _data, tbody, tr;
      tbody = $("#ratingtable tbody");
      _data = data.toJSON();
      tr = $("<tr/>");
      tr.append("<td>" + _data.position + "</td>");
      tr.append("<td>" + _data.name + "</td>");
      return tbody.append(tr);
    }, this);
  };

  return RatingView;

})(Backbone.View);

rating_view = new RatingView({
  model: Student
});

var SidebarView, sidebar_view,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

SidebarView = (function(superClass) {
  extend(SidebarView, superClass);

  function SidebarView() {
    return SidebarView.__super__.constructor.apply(this, arguments);
  }

  SidebarView.prototype.el = $('#workarea');

  SidebarView.prototype.initialize = function() {
    return _.bindAll(this, 'render');
  };

  SidebarView.prototype.render = function() {
    var aside, template, templateEl, ul;
    templateEl = $("#sidebar_template");
    template = _.template(templateEl.html(), {});
    aside = $("aside.sidebar");
    aside.html(template);
    ul = $(".tasks-list");
    ul.empty();
    return _.each(this.model.models, function(data) {
      var _data, li;
      _data = data.toJSON();
      li = $("<li/>");
      li.addClass("task-sidebar");
      li.append("<a href='#!/task/" + _data.id + "' data-movie='" + _data.video_available + "'>" + _data.title + "</a>");
      return ul.append(li);
    }, this);
  };

  return SidebarView;

})(Backbone.View);

sidebar_view = new SidebarView({
  model: tasks
});

var TaskView, task_view,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

TaskView = (function(superClass) {
  extend(TaskView, superClass);

  function TaskView() {
    return TaskView.__super__.constructor.apply(this, arguments);
  }

  TaskView.prototype.el = $('#workarea');

  TaskView.prototype.initialize = function() {
    return _.bindAll(this, 'render');
  };

  TaskView.prototype.render = function(id) {
    var data, template, templateEl;
    id = id || 1;
    data = this.model.get(id);
    templateEl = $("#task_template");
    template = _.template(templateEl.html(), {});
    return $(this.el).html(template(data.toJSON()));
  };

  return TaskView;

})(Backbone.View);

task_view = new TaskView({
  model: tasks
});

var appRouter, app_router,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

appRouter = (function(superClass) {
  extend(appRouter, superClass);

  function appRouter() {
    return appRouter.__super__.constructor.apply(this, arguments);
  }

  appRouter.prototype.routes = {
    "!/task/:id": "task",
    "!/rating": "rating",
    "!/about": "about",
    "*path": "defaultRoute",
    "": "defaultRoute"
  };

  appRouter.prototype.defaultRoute = function() {
    task_view.render();
    return sidebar_view.render();
  };

  return appRouter;

})(Backbone.Router);

app_router = new appRouter;

app_router.on("route:task", function(id) {
  task_view.render(id);
  return sidebar_view.render();
});

app_router.on("route:rating", function() {
  rating_view.render();
  return sidebar_view.render();
});

app_router.on("route:about", function() {
  about_view.render();
  return sidebar_view.render();
});

Backbone.history.start();
